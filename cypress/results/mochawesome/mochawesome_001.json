{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2023-03-24T15:14:25.271Z",
    "end": "2023-03-24T15:14:31.110Z",
    "duration": 5839,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4aa5f550-ed76-433c-8077-61370742f664",
      "title": "",
      "fullFile": "cypress/e2e/tests/home-screen.cy.js",
      "file": "cypress/e2e/tests/home-screen.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3a70f715-9f64-4e2b-9a10-a880f12bf2e6",
          "title": "Home screen tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "The cocktails list should be visible",
              "fullTitle": "Home screen tests The cocktails list should be visible",
              "timedOut": null,
              "duration": 1558,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'https://whale-app-iz3av.ondigitalocean.app/v2/search/cocktails?page=0',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n}).then(cocktailsList => {\n  const cocktails = cocktailsList.body.cocktails;\n  cy.get('.cocktails-body__list .list__item').each(item => {\n    const itemText = item.text().trim();\n    expect(itemText).to.contain(cocktails[item.index()].name);\n  });\n});",
              "err": {},
              "uuid": "6da62b63-2f0b-442e-bf0f-c632166eb94d",
              "parentUUID": "3a70f715-9f64-4e2b-9a10-a880f12bf2e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "items should be reordered after sorting applying",
              "fullTitle": "Home screen tests items should be reordered after sorting applying",
              "timedOut": null,
              "duration": 2245,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.intercept({\n  method: \"GET\",\n  url: \"/v2/search/cocktails?page=0&sort=biggest-rate\"\n}).as(\"sortingApplied\");\ncy.get(\".logo\").should(\"contain\", \"MIXdrinks\");\ncy.contains(\".sorting__list\", 'Найкраща оцінка').click();\ncy.contains(\".sorting__list\", 'Найкраща оцінка').click();\ncy.wait(\"@sortingApplied\").its('response.body').then(body => {\n  const cocktails = body.cocktails;\n  cy.get('.cocktails-body__list .list__item').each(item => {\n    const itemText = item.text().trim();\n    expect(itemText).to.contain(cocktails[item.index()].name);\n  });\n});",
              "err": {},
              "uuid": "16cec428-d6be-4624-870f-d9c79c558d0c",
              "parentUUID": "3a70f715-9f64-4e2b-9a10-a880f12bf2e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "items should be filteres after ppplying a filter",
              "fullTitle": "Home screen tests items should be filteres after ppplying a filter",
              "timedOut": null,
              "duration": 1962,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.intercept({\n  method: \"GET\",\n  url: \"/v2/search/cocktails*\"\n}).as(\"sortingApplied\");\ncy.get('[title=\"міцні\"]').find('.filter-list-item__checkbox').click();\ncy.wait(\"@sortingApplied\");\ncy.get('[class=\"filters-tag-cloud-list-item__link nuxt-link-active\"]').should('exist');\ncy.get('[class=\"filters-tag-cloud-list-item__link nuxt-link-active\"]').click();\ncy.get('[class=\"filters-tag-cloud-list-item__link nuxt-link-active\"]').should('not.exist');\n// cy.url().should(\"contain\", \"?sort=biggest-rate\");",
              "err": {},
              "uuid": "88d6ee71-71a3-4058-adcc-b21c9e0c93c2",
              "parentUUID": "3a70f715-9f64-4e2b-9a10-a880f12bf2e6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6da62b63-2f0b-442e-bf0f-c632166eb94d",
            "16cec428-d6be-4624-870f-d9c79c558d0c",
            "88d6ee71-71a3-4058-adcc-b21c9e0c93c2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5765,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/results/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}